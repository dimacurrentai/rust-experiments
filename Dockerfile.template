# Build the binaries statically, and then run them from a separate container.
FROM alpine AS build

# Intentionally not installing `cargo`, etc. But it does need `clang`.
RUN apk add rustup clang musl

# PLACEHOLDER_BUILD

# Init local rust via `rustup`, including static targets builder.
RUN rustup-init -y -t "$(uname -m)-unknown-linux-musl" --no-modify-path 
RUN mv /root/.cargo/bin/* /usr/local/bin/

# Build the project.
COPY ./code /code
WORKDIR /code
RUN cargo build --release --target "$(uname -m)-unknown-linux-musl"

# Prepare the static binary.
RUN cp ./target/"$(uname -m)-unknown-linux-musl"/release/"$(cat Cargo.toml | grep '^name\s*=' | cut -f2 -d'"')" /binary

# Run the tests. Should be fine in case of no tests. Single-threaded for the tests run order to be lexicographical.
RUN cargo test -- --test-threads=1
RUN cargo test --release -- --test-threads=1

# The resulting container with the static binary only.
FROM scratch
COPY --from=build /binary /binary
# PLACEHOLDER_RUN
ENTRYPOINT ["/binary"]
